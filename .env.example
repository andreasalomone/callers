# ======================================================================
#  .env.example â€” Telegram Trading-Calls Feed  (MVP)
#  Copy to `.env`, fill in real values, and NEVER commit secrets ðŸ”‘
# ======================================================================

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ GLOBAL â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
APP_ENV=development          # or "production"
TZ=UTC                       # Server timezone
LOG_LEVEL=INFO               # DEBUG | INFO | WARN | ERROR

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ POSTGRESQL â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# These variables are used by the `postgres` service in docker-compose.yml
# and by the `api` and `collector` services to connect to the database.
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=callers
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
# This single-line URL is constructed by the applications from the variables above.
# It's the standard way to connect for SQLAlchemy and asyncpg.
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/callers

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ REDIS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=              # leave blank if none

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ TELEGRAM CLIENT CREDENTIALS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Create your app at https://my.telegram.org/apps to get these.
TELEGRAM_API_ID=1234567
TELEGRAM_API_HASH=0123456789abcdef0123456789abcdef

# This will be generated by the collector service on its first interactive run.
# You need to copy the output from the console and paste it here.
# IMPORTANT: Keep this value secret!
SESSION_STRING=

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ API / GATEWAY â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# The API service doesn't require specific environment variables for the MVP,
# as it reads the DATABASE_URL and is configured in docker-compose.

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ FRONT-END â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# The frontend service doesn't require specific environment variables for the MVP,
# as its API endpoint is configured in docker-compose.

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ADMIN â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# YAML file listing public TG channels to ingest (mounted in Docker).
CHANNEL_CONFIG_PATH=/app/config/channels.yaml
CHANNEL_CONFIG_POLL=30       # seconds between hot-reload checks

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ (FUTURE) DEXSCREENER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# DEXSCREENER_BASE_URL=https://api.dexscreener.com/latest/dex
# DEXSCREENER_TIMEOUT_MS=5000
# DEXSCREENER_RATE_LIMIT_PER_MIN=30

# ======================================================================
# End of .env.example
# ======================================================================
